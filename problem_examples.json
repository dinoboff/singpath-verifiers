{
  "python": {
    "pass_example": {
      "tests": ">>> x\n 2\n>>> y\n 3",
      "solution": "x=2\ny=3",
      "is_solved": true,
      "result":{"results": [{"call": "x", "correct": true, "expected": 2, "received": 2}, {"call": "y", "correct": true, "expected": 3, "received": 3}], "solved": true, "printed": ""}
    },
    "fail_example": {
      "tests": ">>> x\n 2\n>>> y\n 3",
      "solution": "x=2\ny=2",
      "is_solved": false,
      "result":{"results": [{"correct": true, "call": "x", "expected": 2, "received": 2}, {"correct": false, "call": "y", "expected": 3, "received": 2}], "solved": false, "printed": ""}
    },
    "error_example": {
      "tests": ">>> x\n 2",
      "solution": "y=2",
      "is_solved": false,
      "returns_error": true,
      "result":{"errors":"Python missing value test error."}
    },
    "print_example": {
      "tests": ">>> x\n 2",
      "solution": "print(99)\nx=2",
      "is_solved": true
    }

  },
  "example": {
    "pass_example": {
      "tests": "",
      "solution": "pass",
      "is_solved": true
    },
    "fail_example": {
      "tests": "",
      "solution": "fail",
      "is_solved": false,
      "result":{"results": [], "solved": true, "printed": ""}
    },
    "error_example": {
      "tests": "",
      "solution": "error",
      "is_solved": false,
      "returns_error": true,
      "result":{"errors":"Example error"}
    }
  },
  "java": {
    "stream": {
      "tests": "SingPath sp = new SingPath();\nassertEquals(3 , sp.add());",
      "solution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class SingPath {\n   public long add() {long count = Arrays.asList(1,2,3).stream().count();\n  return count;\n   }\n} \n",
      "is_solved": true,
      "result":{"results": [], "solved": true, "printed": ""}

    },
    "stream_fail": {
      "tests": "SingPath sp = new SingPath();\nassertEquals(3 , sp.add());",
      "solution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class SingPath {\n   public long add() {long count = Arrays.asList(1).stream().count();\n  return count;\n   }\n} \n",
      "is_solved": false,
      "result":{"results": [{"expected": "<3> ", "call": "testExample(SingPathTest)", "correct": false, "received": "<1>"}], "solved": false, "printed": ""}
    },
    "3": {
      "tests": "assertEquals(2 , 2);\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "4": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "5": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "6": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "7": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "8": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "9": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "pass_example": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "fail_example": {
      "tests": "assertEquals(2 , 3);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": false,
      "result":{"call": "testExample(SingPathTest)", "received": "<3>", "expected": "<2> ", "correct": false}
    },
    "compile_error": {
      "tests": "assertEquals(2 , 2);",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0\n   }\n} \n",
      "is_solved": false,
      "returns_error": true,
      "result":{"errors":"Test error for compile."}
    }
  }
}
